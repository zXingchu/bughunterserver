server.port=8088
server.tomcat.uri-encoding=utf-8
spring.session.store-type=none
spring.jpa.show-sql = true
logging.level.org.springframework.data=DEBUG
logging.level.org.springframework.web=debug
spring.jpa.hibernate.ddl-auto=update
#create：
#每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop ：
#每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：
#最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#validate ：
#每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#spring.datasource.url=jdbc:mysql://101.132.181.10:3306/bughunter
spring.datasource.url=jdbc:mysql://localhost:3306/bughunter
spring.datasource.username=root
spring.datasource.password=mysql
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# 设置邮箱主机
spring.mail.host=smtp.163.com
# 设置用户名
spring.mail.username=18260067905@163.com
# 设置密码
spring.mail.password=hbdai163
# 设置是否需要认证，如果为true,那么用户名和密码就必须的，
#如果设置false，可以不设置用户名和密码，当然也得看你的对接的平台是否支持无密码进行访问的。
spring.mail.properties.mail.smtp.auth=true
# STARTTLS[1]  是对纯文本通信协议的扩展。它提供一种方式将纯文本连接升级为加密连接（TLS或SSL），而不是另外使用一个端口作加密通信。
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

#启用gzip压缩
#server.compression.enabled=true
#server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript
#server.compression.min-response-size=2048
#
#security.enable-csrf=false
#
#spring.mvc.static-path-pattern=/static/**
#spring.mvc.view.prefix=/static/
#spring.mvc.view.suffix=.html